(deftheme Darkula
  "Darkula theme")

(let ((c-bg "#2b2b2b")
      (c-fg "#a9b7c6")
      (c-cursor "#bbbbbb")

      (c-bg-0 "#101010")
      (c-bg-1 "#1d1d1d")
      (c-bg-2 "#2b2b2b")
      (c-bg-3 "#3b3b3b")
      (c-bg-4 "#4b4b4b")
      (c-bg-5 "#5b5b5b")

      (c-fg-0 "#ffffff")
      (c-fg-1 "#e8e8e8")
      (c-fg-2 "#d0d0d0")
      (c-fg-3 "#b8b8b8")
      (c-fg-4 "#a0a0a0")

      (c-status-bg-1 "#2b2b2b")
      (c-status-bg-2 "#383838")
      (c-status-active "#cc7832")
      (c-status-inactive "#484848")

      (c-matched-bracket-fg "#ffc66d")
      (c-highlight-bg "#274f75")
      (c-selection-bg "#214283")
      (c-selection-bg-2 "#455c73")
      (c-find-bg "#274f75")

      (c-comment-fg "#6f6f6f")
      (c-string-fg "#6a8759")
      (c-number-fg "#6897bb")
      (c-builtin-fg "#937db8") ; + macro
      (c-keyword-fg "#cc7832") ; + op, sep
      (c-typename-fg "#6890b3") ; + class
      (c-function-fg "#ffc66d") ; + tag attribute

      (c-invalid "#f8f8f0")
      (c-deprecated "#ae81ff")

      (c-inserted "#447152")
      (c-deleted "#8f5247")
      (c-changed "#43698d")
      (c-ignored "#565656")

      (c-pop-bg "#e6dfef")
      (c-pop-fg "#777577")
      (c-pop-sel-bg "#dad0df")
      (c-pop-common-fg "#000000")

      (c-ansi-black "#2b2b2b")
      (c-ansi-red "#e41507")
      (c-ansi-green "#329033")
      (c-ansi-yellow "#ffcc00")
      (c-ansi-blue "#2981ca")
      (c-ansi-magenta "#977dab")
      (c-ansi-cyan "#8ac6f2")
      (c-ansi-white "#a9b7c6")
      )
  (custom-theme-set-faces
   'Darkula
   `(default ((t (:background ,c-bg :foreground ,c-fg))))
   '(italic ((t (:slant italic))))
   '(bold ((t (:weight bold))))
   '(bold-italic ((t (:inherit (bold) :slant italic))))
   '(variable-pitch ((t nil)))
   '(fixed-pitch ((t nil)))
   '(fixed-pitch-serif ((t nil)))

   `(cursor ((t (:background ,c-cursor))))
   '(fringe ((t (:inherit (default)))))
   `(region ((t (:background ,c-selection-bg))))
   `(secondary-selection ((t (:background ,c-selection-bg-2))))
   '(isearch ((t (:inverse-video t))))
   `(highlight ((t (:background ,c-highlight-bg))))
   `(lazy-highlight ((t (:background ,c-bg-3))))
   `(show-paren-match ((t (:foreground ,c-matched-bracket-fg :weight bold))))
   `(show-paren-mismatch ((t (:background ,c-invalid :foreground ,c-bg))))
   `(line-number ((t (:background ,c-bg-1 :foreground ,c-fg-2))))
   `(line-number-current-line ((t (:background ,c-bg :foreground ,c-fg-2))))
   `(linum ((t (:inherit (default) :background ,c-bg :foreground ,c-fg-2))))

   `(mode-line ((t (:foreground ,c-fg-2 :background ,c-status-active))))
   `(mode-line-2 ((t (:inherit mode-line :foreground ,c-fg-2 :background ,c-status-bg-2))))
   `(mode-line-3 ((t (:inherit mode-line :foreground ,c-fg-2 :background ,c-status-bg-1))))
   `(mode-line-inactive ((t (:inherit (mode-line) :background ,c-status-inactive))))
   '(mode-line-highlight ((t (:inverse-video t))))
   '(mode-line-buffer-id ((t (:inherit (mode-line bold)))))
   `(minibuffer-prompt ((t (:foreground ,c-keyword-fg :inherit (bold)))))

   `(escape-glyph ((t (:foreground ,c-keyword-fg))))
   `(font-lock-builtin-face ((t (:foreground ,c-builtin-fg :inherit (bold)))))
   `(font-lock-comment-face ((t (:foreground ,c-comment-fg))))
   `(font-lock-constant-face ((t (:foreground ,c-number-fg))))
   `(font-lock-function-name-face ((t (:foreground ,c-function-fg))))
   `(font-lock-keyword-face ((t (:foreground ,c-keyword-fg :inherit (bold)))))
   `(font-lock-operator-face ((t (:foreground ,c-keyword-fg))))
   `(font-lock-parameter-face ((t (:inherit (italic)))))
   `(font-lock-preprocessor-face ((t (:foreground ,c-keyword-fg :inherit (bold)))))
   `(font-lock-string-face ((t (:foreground ,c-string-fg))))
   `(font-lock-type-face ((t (:foreground ,c-typename-fg :inherit (bold)))))
   `(font-lock-variable-name-face ((t (:inherit (italic)))))
   `(font-lock-warning-face ((t (:foreground ,c-invalid :underline t))))

   `(success ((t (:foreground ,c-inserted :inherit (bold)))))
   `(warning ((t (:foreground ,c-function-fg :inherit (bold)))))
   `(error ((t (:foreground ,c-invalid :inherit (bold) :underline t))))

   '(tuareg-font-lock-governing-face ((t (:inherit (font-lock-keyword-face)))))
   '(tuareg-font-lock-multistage-face ((t (:inherit (font-lock-keyword-face)))))
   '(tuareg-font-lock-operator-face ((t (:inherit (font-lock-operator-face)))))
   '(tuareg-font-lock-error-face ((t (:inherit (error)))))
   `(tuareg-font-lock-interactive-output-face ((t (:foreground ,c-builtin-fg))))
   '(tuareg-font-lock-interactive-error-face ((t (:inherit (error)))))

   `(racket-check-syntax-def-face ((t (:background "SeaGreen1" :foreground ,c-fg-3 :inherit (bold)))))
   `(racket-check-syntax-use-face ((t (:background "PaleGreen1" :foreground ,c-fg-3 :inherit (bold-italic)))))
   '(racket-here-string-face ((t (:inherit (sh-heredoc-face)))))
   '(racket-keyword-argument-face ((t (:foreground "IndianRed" :inherit (bold)))))
   '(racket-logger-config-face ((t (:inherit (italic font-lock-comment-face)))))
   '(racket-logger-debug-face ((t (:inherit (font-lock-constant-face)))))
   '(racket-logger-error-face ((t (:inherit (error)))))
   '(racket-logger-fatal-face ((t (:inherit (bold) :inherit (error)))))
   '(racket-logger-info-face ((t (:inherit (font-lock-string-face)))))
   '(racket-logger-topic-face ((t (:inherit (italic font-lock-function-name-face)))))
   '(racket-logger-warning-face ((t (:inherit (warning)))))
   '(racket-selfeval-face ((t (:inherit (font-lock-string-face)))))

   '(sh-escaped-newline ((t (:inherit (font-lock-string-face)))))
   '(sh-heredoc ((t (:foreground "IndianRed" :inherit (bold)))))
   '(sh-quoted-exec ((t (:foreground "salmon"))))

   '(font-latex-sectioning-0-face ((t (:inherit font-latex-sectioning-1-face))))
   `(font-latex-bold-face ((t (:inherit bold :foreground ,c-builtin-fg))))
   '(font-latex-doctex-documentation-face ((t nil)))
   '(font-latex-doctex-preprocessor-face ((t (:inherit (font-latex-doctex-documentation-face font-lock-builtin-face font-lock-preprocessor-face)))))
   `(font-latex-italic-face ((t (:inherit italic :foreground ,c-builtin-fg))))
   `(font-latex-math-face ((t (:foreground ,c-number-fg))))
   `(font-latex-script-char-face ((t (:foreground ,c-builtin-fg))))
   '(font-latex-sectioning-1-face ((t (:inherit font-latex-sectioning-2-face))))
   '(font-latex-sectioning-2-face ((t (:inherit font-latex-sectioning-3-face))))
   '(font-latex-sectioning-3-face ((t (:inherit font-latex-sectioning-4-face))))
   '(font-latex-sectioning-4-face ((t (:inherit font-latex-sectioning-5-face))))
   '(font-latex-sectioning-5-face ((t (:inherit (font-lock-function-name-face)))))
   '(font-latex-sedate-face ((t (:inherit (font-lock-string-face)))))
   '(font-latex-slide-title-face ((t (:inherit (variable-pitch font-lock-type-face) :inherit (bold)))))
   '(font-latex-string-face ((t (:inherit (font-lock-string-face)))))
   `(font-latex-subscript-face ((t (:foreground ,c-builtin-fg :height 0.7))))
   `(font-latex-superscript-face ((t (:foreground ,c-builtin-fg :height 0.7))))
   '(font-latex-verbatim-face ((t (:foreground "DimGray"))))
   `(font-latex-warning-face ((t (:inherit (bold) :foreground ,c-invalid))))

   `(company-echo-common    ((t (:foreground ,c-bg-3 :background ,c-fg-1))))
   `(company-preview        ((t (:background ,c-bg-3 :foreground ,c-fg-1))))
   `(company-preview-common ((t (:foreground ,c-fg-0 :background ,c-bg-3))))
   `(company-preview-search ((t (:foreground ,c-typename-fg :background ,c-bg-3))))
   `(company-scrollbar-bg   ((t (:background ,c-bg-4))))
   `(company-scrollbar-fg   ((t (:foreground ,c-bg-3))))
   `(company-tooltip        ((t (:foreground ,c-fg :background ,c-bg-3))))
   `(company-tooltop-annotation       ((t (:foreground ,c-number-fg))))
   `(company-tooltip-common           ((t (:foreground ,c-keyword-fg :bold t))))
   `(company-tooltip-common-selection ((t (:foreground ,c-keyword-fg :bold t))))
   `(company-tooltip-mouse            ((t (:inherit highlight))))
   `(company-tooltip-selection        ((t (:background ,c-selection-bg :foreground ,c-fg))))
   `(company-template-field           ((t (:inherit region))))
   )
  (setq-default ansi-color-names-vector
                (vconcat
                 (list
                  c-ansi-black c-ansi-red c-ansi-green c-ansi-yellow
                  c-ansi-blue c-ansi-magenta c-ansi-cyan c-ansi-white)))
  t)

(provide-theme 'Darkula)
